// Aula 10 - Detectando malware usando YARA

https://github.com/wazuh/wazuh-documentation/blob/master/source/images/manual/malware/wazuh-yara-events-flow.png

https://www.python.org/downloads/windows/

https://learn.microsoft.com/pt-br/cpp/windows/latest-supported-vc-redist?view=msvc-170

> Invoke-WebRequest -Uri https://github.com/VirusTotal/yara/releases/download/v4.5.2/yara-v4.5.2-2326-win64.zip -OutFile v4.5.2-2326-win64.zip

> Expand-Archive v4.5.2-2326-win64.zip; Remove-Item v4.5.2-2326-win64.zip

https://github.com/VirusTotal/yara/releases/

> mkdir 'C:\Program Files (x86)\ossec-agent\active-response\bin\yara\'

> cp .\v4.5.2-2326-win64\yara64.exe 'C:\Program Files (x86)\ossec-agent\active-response\bin\yara\'

> pip install valhallaAPI

> mkdir 'C:\Program Files (x86)\ossec-agent\active-response\bin\yara\rules\'

> cd 'C:\Program Files (x86)\ossec-agent\active-response\bin\yara\rules\'

> Invoke-WebRequest -Uri https://raw.githubusercontent.com/Mazuco/wazuh/refs/heads/main/download_yara_rules.py -OutFile download_yara_rules.py

# download_yara_rules.py
from valhallaAPI.valhalla import ValhallaAPI

v = ValhallaAPI(api_key="1111111111111111111111111111111111111111111111111111111111111111")
response = v.get_rules_text()

with open('yara_rules.yar', 'w') as fh:
    fh.write(response)

"C:\Program Files (x86)\ossec-agent\active-response\bin\yara\rules\"

> cd 'C:\Program Files (x86)\ossec-agent\active-response\bin\yara\rules\'

> python.exe .\download_yara_rules.py

> cd 'C:\Program Files (x86)\ossec-agent\active-response\bin\'

> Invoke-WebRequest -Uri https://raw.githubusercontent.com/Mazuco/wazuh/refs/heads/main/yara.bat -OutFile yara.bat

@echo off

setlocal enableDelayedExpansion

reg Query "HKLM\Hardware\Description\System\CentralProcessor\0" | find /i "x86" > NUL && SET OS=32BIT || SET OS=64BIT


if %OS%==32BIT (
    SET log_file_path="%programfiles%\ossec-agent\active-response\active-responses.log"
)

if %OS%==64BIT (
    SET log_file_path="%programfiles(x86)%\ossec-agent\active-response\active-responses.log"
)

set input=
for /f "delims=" %%a in ('PowerShell -command "$logInput = Read-Host; Write-Output $logInput"') do (
    set input=%%a
)


set json_file_path="C:\Program Files (x86)\ossec-agent\active-response\stdin.txt"
set syscheck_file_path=
echo %input% > %json_file_path%

for /F "tokens=* USEBACKQ" %%F in (`Powershell -Nop -C "(Get-Content 'C:\Program Files (x86)\ossec-agent\active-response\stdin.txt'|ConvertFrom-Json).parameters.alert.syscheck.path"`) do (
set syscheck_file_path=%%F
)

del /f %json_file_path%
set yara_exe_path="C:\Program Files (x86)\ossec-agent\active-response\bin\yara\yara64.exe"
set yara_rules_path="C:\Program Files (x86)\ossec-agent\active-response\bin\yara\rules\yara_rules.yar"
echo %syscheck_file_path% >> %log_file_path%
for /f "delims=" %%a in ('powershell -command "& \"%yara_exe_path%\" \"%yara_rules_path%\" \"%syscheck_file_path%\""') do (
    echo wazuh-yara: INFO - Scan result: %%a >> %log_file_path%
)

exit /b

C:\Program Files (x86)\ossec-agent\ossec.conf 

<directories check_all="yes" realtime="yes">C:\Users\Administrator\Downloads</directories>

> Restart-Service -Name wazuh

# vim /var/ossec/etc/decoders/local_decoder.xml

<decoder name="yara_decoder">
    <prematch>wazuh-yara:</prematch>
</decoder>

<decoder name="yara_decoder1">
    <parent>yara_decoder</parent>
    <regex>wazuh-yara: (\S+) - Scan result: (\S+) (\S+)</regex>
    <order>log_type, yara_rule, yara_scanned_file</order>
</decoder>

# vim /var/ossec/etc/rules/local_rules.xml

<group name="syscheck,">
  <rule id="100303" level="7">
    <if_sid>550</if_sid>
    <field name="file">C:\\Users\\Administrator\\Downloads</field>
    <description>File modified in C:\Users\Administrator\Downloads directory.</description>
  </rule>
  <rule id="100304" level="7">
    <if_sid>554</if_sid>
    <field name="file">C:\\Users\\Administrator\\Downloads</field>
    <description>File added to C:\Users\Administrator\Downloads  directory.</description>
  </rule>
</group>

<group name="yara,">
  <rule id="108000" level="0">
    <decoded_as>yara_decoder</decoded_as>
    <description>Yara grouping rule</description>
  </rule>

  <rule id="108001" level="12">
    <if_sid>108000</if_sid>
    <match>wazuh-yara: INFO - Scan result: </match>
    <description>File "$(yara_scanned_file)" is a positive match. Yara rule: $(yara_rule)</description>
  </rule>
</group>

# vim /var/ossec/etc/ossec.conf

<ossec_config>
  <command>
    <name>yara_windows</name>
    <executable>yara.bat</executable>
    <timeout_allowed>no</timeout_allowed>
  </command>

  <active-response>
    <command>yara_windows</command>
    <location>local</location>
    <rules_id>100303,100304</rules_id>
  </active-response>
</ossec_config>

# sudo systemctl restart wazuh-manager

> cd ~

> Invoke-WebRequest -Uri https://secure.eicar.org/eicar_com.zip -OutFile eicar.zip

> Expand-Archive .\eicar.zip

> cp .\eicar\eicar.com C:\Users\Administrator\Downloads

rule.groups:yara

File "c:\users\administrator\downloads\eicar.com" is a positive match. Yara rule: SUSP_Just_EICAR_RID2C24

Para Linux

Vamos primeiro, instalar o YARA:

Ubuntu:

# sudo apt update
# sudo apt install yara jq -y

RHEL/Rocky:

# dnf --enablerepo=devel install yara jq

# yara

# sudo mkdir -p /tmp/yara/rules

# sudo curl 'https://valhalla.nextron-systems.com/api/v1/get' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://valhalla.nextron-systems.com/' -H 'Content-Type: application/x-www-form-urlencoded' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' --data 'demo=demo&apikey=1111111111111111111111111111111111111111111111111111111111111111&format=text' -o /tmp/yara/rules/yara_rules.yar

# sudo curl 'https://raw.githubusercontent.com/Mazuco/wazuh/refs/heads/main/yara_rules.yar' -o /tmp/yara/rules/yara_rules.yar

# sudo curl 'https://raw.githubusercontent.com/Mazuco/wazuh/refs/heads/main/yara.sh' -o /var/ossec/active-response/bin/yara.sh

# cat /var/ossec/active-response/bin/yara.sh

# sudo chmod 750 /var/ossec/active-response/bin/yara.sh
# sudo chown wazuh:wazuh /var/ossec/active-response/bin/yara.sh

# vim /var/ossec/etc/ossec.conf

<directories check_all="yes" realtime="yes">/root/</directories>

# sudo systemctl restart wazuh-agent

# vim /var/ossec/etc/decoders/local_decoder.xml

<decoder name="yara_decoder">
  <prematch>wazuh-yara:</prematch>
</decoder>

<decoder name="yara_decoder1">
  <parent>yara_decoder</parent>
  <regex>wazuh-yara: (\S+) - Scan result: (\S+) (\S+)</regex>
  <order>log_type, yara_rule, yara_scanned_file</order>
</decoder>

# vim /var/ossec/etc/rules/local_rules.xml

<group name="syscheck,">

...

  <rule id="100200" level="7">
    <if_sid>550</if_sid>
    <field name="file">/root/</field>
    <description>File modified in /root directory.</description>
  </rule>
  <rule id="100201" level="7">
    <if_sid>554</if_sid>
    <field name="file">/root/</field>
    <description>File added to /root directory.</description>
  </rule>
  
</group>

<group name="yara,">
  <rule id="108000" level="0">
    <decoded_as>yara_decoder</decoded_as>
    <description>Yara grouping rule</description>
  </rule>
  <rule id="108001" level="12">
    <if_sid>108000</if_sid>
    <match>wazuh-yara: INFO - Scan result: </match>
    <description>File "$(yara_scanned_file)" is a positive match. Yara rule: $(yara_rule)</description>
  </rule>
</group>

# vim /var/ossec/etc/ossec.conf

<ossec_config>
  <command>
    <name>yara_linux</name>
    <executable>yara.sh</executable>
    <extra_args>-yara_path /usr/local/bin -yara_rules /tmp/yara/rules/yara_rules.yar</extra_args>
    <timeout_allowed>no</timeout_allowed>
  </command>

  <active-response>
    <command>yara_linux</command>
    <location>local</location>
    <rules_id>100200,100201</rules_id>
  </active-response>
</ossec_config>

# sudo systemctl restart wazuh-manager

# sudo curl https://raw.githubusercontent.com/Mazuco/wazuh/refs/heads/main/eicar.com --output /root/eicar.com





















